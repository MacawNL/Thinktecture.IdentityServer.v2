@model DelegationSettingsForUserViewModel
@using Thinktecture.IdentityServer.Web.Areas.Admin.App_LocalResources.Delegation
@using Thinktecture.IdentityServer.Web.Utility

@{
    if (Model.IsNew)
    {
        ViewBag.Title = Configure_cshtml.NewDelegationConfiguration;
    }
    else
    {
        ViewBag.Title = string.Format(Configure_cshtml.DelegationConfigurationForUser, Model.UserName);
    }
}

@Html.ValidationSummary(Configure_cshtml.ErrorCreatingDelegationConfiguration, new { @class = "alert alert-error" })

<fieldset class="editor small">
    <legend>@ViewBag.Title</legend>
    @using (Html.BeginForm("Add", "Delegation", FormMethod.Post, new { @class="form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        var model = new Thinktecture.IdentityServer.Models.DelegationSetting()
        {
            UserName = Model.UserName
        };

        if (Model.IsNew)
        {
            <div class="control-group">
                @Html.LabelFor(x => model.UserName, new { @class = "control-label" })

                <div class="controls">
                    @Html.DropDownListFor(x => model.UserName, Model.AllUserNames)
                    @Html.ValidatorFor(x => model.UserName)
                </div>
            </div>
        }
        else
        {
            <div class="control-group">
                
                @Html.LabelFor(x => model.UserName, new { @class = "control-label" })
                <div class="controls">
                    @Html.HiddenFor(x => model.UserName)
                    @Html.DisplayFor(x => model.UserName)
                </div>
            </div>
        }
        
        <div class="control-group">
            @Html.LabelFor(x => model.Description, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(x => model.Description)
                @Html.ValidatorFor(x => model.Description)
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => model.Realm, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(x => model.Realm)
                @Html.ValidatorFor(x => model.Realm)
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <button type="submit" class="btn btn-large btn-primary">@Configure_cshtml.AddRealm</button>
                <button type="reset" class="btn btn-large">@Configure_cshtml.Cancel</button>
            </div>
        </div>
    }
    <hr />

    @foreach (var model in Model.DelegationSettings)
    {
        using (Html.BeginForm("Remove", "Delegation", FormMethod.Post, new { @class="form-horizontal"}))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => model.UserName)
            <div class="control-group">
                @Html.LabelFor(x => model.Description, new { @class = "control-label" })
                <div class="controls">
                    @Html.DisplayFor(x => model.Description)
                    @Html.HiddenFor(x => model.Description)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => model.Realm, new { @class = "control-label" })

                <div class="controls">
                    @Html.DisplayFor(x => model.Realm)
                    @Html.HiddenFor(x => model.Realm)
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <button type="submit" class="btn btn-large">@Configure_cshtml.DeleteRealm</button>
                </div>
            </div>            
        }
    }

</fieldset>
