@model ClientCertificatesForUserViewModel
@using Thinktecture.IdentityServer.Web.Areas.Admin.App_LocalResources.ClientCertificate
@using Thinktecture.IdentityServer.Web.Utility
@{
    if (Model.IsNew)
    {
        ViewBag.Title = Configure_cshtml.NewClientCertificates;    
    }
    else
    {
        ViewBag.Title = string.Format(Configure_cshtml.ClientCertificatesForUser, Model.UserName);
    }
}

@Html.ValidationSummary(Configure_cshtml.ErrorWithClientCertificates, new { @class = "alert alert-error" })

<fieldset class="editor">
    <legend>@ViewBag.Title</legend>
    
    @using (Html.BeginForm("Add", "ClientCertificate", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        
        if (Model.IsNew)
        {
            <div class="control-group">
                @Html.LabelFor(x => Model.NewCertificate.UserName, new { @class = "control-label" })
                <div class="controls">
                    @Html.DropDownListFor(x => Model.NewCertificate.UserName, Model.AllUserNames)
                    @Html.ValidatorFor(x => Model.NewCertificate.UserName)
                </div>
            </div>
        }
        else
        {
            <div class="control-group">
                @Html.LabelFor(x => Model.NewCertificate.UserName, new { @class = "control-label" })
                <div class="controls">
                    @Html.HiddenFor(x => Model.NewCertificate.UserName)
                    @Html.DisplayFor(x => Model.NewCertificate.UserName)
                </div>
            </div>
        }
        
        <div class="control-group">
            @Html.LabelFor(x => Model.NewCertificate.Description, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(x => Model.NewCertificate.Description)
                @Html.ValidatorFor(x => Model.NewCertificate.Description)
            </div>
        </div>
        <div class="control-group">
            @Html.LabelFor(x => Model.NewCertificate.Thumbprint, new { @class = "control-label" })
            <div class="controls">
                @Html.EditorFor(x => Model.NewCertificate.Thumbprint)
                @Html.ValidatorFor(x => Model.NewCertificate.Thumbprint)
            </div>
        </div>
        
        <div class="control-group">
            <div class="controls">
                <button type="submit" class="btn btn-large btn-primary">@Configure_cshtml.AddCertificate</button>
                <button type="reset" class="btn btn-large">@Configure_cshtml.Cancel</button>
            </div>
        </div>
    }
    <hr />

    @foreach (var model in Model.Certificates)
    {
        using (Html.BeginForm("Remove", "ClientCertificate", FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => model.UserName)
            <div class="control-group">
                @Html.LabelFor(x => model.Description, new { @class = "control-label" })
                <div class="controls">
                    @Html.DisplayFor(x => model.Description)
                    @Html.HiddenFor(x => model.Description)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => model.Thumbprint, new { @class = "control-label" })
                <div class="controls">
                    @Html.DisplayFor(x => model.Thumbprint)
                    @Html.HiddenFor(x => model.Thumbprint)
                </div>
            </div>
            <div class="control-group">
                <div class="controls">
                    <button type="submit" class="btn btn-large btn-primary">@Configure_cshtml.DeleteCertificate</button>
                </div>
            </div>            
        }
    }

</fieldset>
